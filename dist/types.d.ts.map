{"mappings":";AQmBA;IACE,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,sBAAsB,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3E,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,KAAK,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC;CAC1B;AAID,QAAA,MAAM,OAAO,EAAE,MAAM,EAAE,CAAC,KAAK,CAqI5B,CAAC;AAEF,aAAa;IACX,OAAO,EAAE,MAAM,IAAI,CAAC;CACrB,CAAC;AAEF;gBAKc,MAAM,EAAE,cAAc;IA2B3B,IAAI;IAQJ,KAAK;CAGb;AAED,OAAO,MAAM,oBAAqB,cAAc,SAE/C,CAAC;AAKF,eAAe,OAAO,CAAC","sources":["src/src/components/InnerWrapper/index.tsx","src/src/components/ProgressBar/index.tsx","src/src/providers/Store/index.tsx","src/src/steps/AssetSelection/index.tsx","src/src/steps/NetworkSelection/index.tsx","src/src/steps/PaymentMethod/index.tsx","src/src/steps/EnterAmount/index.tsx","src/src/steps/QRCode/index.tsx","src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,null,null,null,null,null,null,null,null,"import '@fortawesome/fontawesome-free/css/all.min.css';\nimport '@map3xyz/components/dist/index.css';\nimport './index.css';\n\nimport { Button, Modal } from '@map3xyz/components';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { createRoot, Root } from 'react-dom/client';\n\nimport Logo from './assets/logo.svg';\nimport InnerWrapper from './components/InnerWrapper';\nimport ProgressBar from './components/ProgressBar';\nimport { Context, Steps, Store } from './providers/Store';\nimport AssetSelection from './steps/AssetSelection';\nimport EnterAmount from './steps/EnterAmount';\nimport NetworkSelection from './steps/NetworkSelection';\nimport PaymentMethod from './steps/PaymentMethod';\nimport QRCode from './steps/QRCode';\n\ninterface Map3InitConfig {\n  coin?: string;\n  generateDepositAddress: (coin: string, network: string) => Promise<string>;\n  network?: string;\n  theme?: 'dark' | 'light';\n}\n\nconst TRANSITION = 300;\n\nconst Map3Sdk: React.FC<Props> = ({ onClose }) => {\n  const [open, setOpen] = useState(false);\n  const [state, dispatch] = useContext(Context);\n\n  const { step } = state;\n\n  useEffect(() => {\n    setOpen(true);\n  }, []);\n\n  const handleClose = () => {\n    setOpen(false);\n    setTimeout(() => {\n      onClose();\n    }, TRANSITION);\n  };\n\n  const isLastStep = state.step === Steps.__LENGTH - 1;\n\n  return (\n    <div>\n      <Modal\n        className=\"map3\"\n        footerBackground\n        onCancel={handleClose}\n        onConfirm={() =>\n          isLastStep\n            ? handleClose()\n            : dispatch({ payload: step + 1, type: 'SET_STEP' })\n        }\n        size=\"small\"\n        transition={TRANSITION}\n        visible={open}\n      >\n        <InnerWrapper>\n          <div className=\"flex w-full items-center justify-between gap-4\">\n            <button\n              className={step === 0 ? 'invisible' : 'visible'}\n              onClick={() => dispatch({ payload: step - 1, type: 'SET_STEP' })}\n            >\n              <i className=\"fa transition-color fa-long-arrow-left duration-75 dark:text-neutral-600 dark:hover:text-neutral-400\" />\n            </button>\n            <ProgressBar progress={step / (Steps.__LENGTH - 1)} />\n            <div>\n              <button onClick={handleClose}>\n                <i className=\"fa transition-color fa-close duration-75 dark:text-neutral-600 dark:hover:text-neutral-400\" />\n              </button>\n            </div>\n          </div>\n        </InnerWrapper>\n        <div className=\"!mt-0 w-full\">\n          <AnimatePresence exitBeforeEnter>\n            {step === Steps.AssetSelection && (\n              <motion.div\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                initial={{ opacity: 0 }}\n                key={Steps[step]}\n              >\n                <AssetSelection />\n              </motion.div>\n            )}\n            {step === Steps.NetworkSelection && (\n              <motion.div\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                initial={{ opacity: 0 }}\n                key={Steps[step]}\n              >\n                <NetworkSelection />\n              </motion.div>\n            )}\n            {step === Steps.PaymentMethod && (\n              <motion.div\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                initial={{ opacity: 0 }}\n                key={Steps[step]}\n              >\n                <PaymentMethod />\n              </motion.div>\n            )}\n            {step === Steps.EnterAmount && (\n              <motion.div\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                initial={{ opacity: 0 }}\n                key={Steps[step]}\n              >\n                <EnterAmount />\n              </motion.div>\n            )}\n            {step === Steps.QRCode && (\n              <motion.div\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                initial={{ opacity: 0 }}\n                key={Steps[step]}\n              >\n                <QRCode />\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n        <div className=\"!mt-0 w-full border-t border-neutral-200 bg-neutral-100 px-4 py-3 dark:border-neutral-700 dark:bg-neutral-800\">\n          <div className=\"flex items-end justify-between\">\n            <a\n              aria-label=\"Map3.xyz\"\n              className=\"flex items-end gap-1 text-xxs text-neutral-400\"\n              href=\"https://map3.xyz\"\n              target=\"_blank\"\n            >\n              Powered by{' '}\n              <div className=\"h-3\">\n                <Logo className=\"h-3\" />\n              </div>\n            </a>\n            <Button\n              onClick={() => {\n                if (isLastStep) {\n                  handleClose();\n                } else {\n                  dispatch({ payload: step + 1, type: 'SET_STEP' });\n                }\n              }}\n            >\n              {isLastStep ? 'Close' : 'Next'}\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\ntype Props = {\n  onClose: () => void;\n};\n\nexport class Map3 {\n  private onClose: () => void;\n  private root: Root;\n  private config: Map3InitConfig;\n\n  constructor(config: Map3InitConfig) {\n    if (!config.generateDepositAddress) {\n      throw new Error('generateDepositAddress is required');\n    }\n\n    if (!config.theme) {\n      config.theme = 'light';\n    }\n\n    this.config = config;\n\n    this.onClose = () => {\n      this.root.unmount();\n      document.body.classList.remove('dark');\n    };\n\n    const element = document.createElement('div');\n    element.id = 'map3';\n    document.body.appendChild(element);\n\n    if (config.theme === 'dark') {\n      document.body.classList.add('dark');\n    }\n\n    this.root = createRoot(element);\n  }\n\n  public open() {\n    this.root.render(\n      <Store {...this.config}>\n        <Map3Sdk onClose={this.onClose} />\n      </Store>\n    );\n  }\n\n  public close() {\n    this.onClose();\n  }\n}\n\nexport const initMap3Sdk = (args: Map3InitConfig) => {\n  return new Map3(args);\n};\n\n// @ts-ignore\nwindow.initMap3Sdk = initMap3Sdk;\n\nexport default Map3Sdk;\n"],"names":[],"version":3,"file":"types.d.ts.map"}