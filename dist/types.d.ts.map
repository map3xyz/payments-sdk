{"mappings":"AuBMA;IACE,OAAO,EAAE,MAAM,CAAC;IAChB,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,sBAAsB,EAAE,CACtB,KAAK,CAAC,EAAE,MAAM,EACd,OAAO,CAAC,EAAE,MAAM,EAChB,WAAW,CAAC,EAAE,OAAO,KAClB,OAAO,CAAC;QAAE,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,CAAC,EAAE,MAAM,CAAA;KAAE,CAAC,CAAC;IACjD,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,KAAK,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC;CAC1B;AACD;gBAKc,MAAM,EAAE,cAAc;IAkC3B,IAAI;IAuBJ,KAAK;CAGb;AAED,OAAO,MAAM,oBAAqB,cAAc,SAE/C,CAAC","sources":["src/src/components/InnerWrapper/index.tsx","src/src/components/ErrorWrapper/index.tsx","src/src/components/LoadingWrapper/index.tsx","src/src/generated/apollo-gql.tsx","src/src/providers/Store/index.tsx","src/src/components/ProgressBar/index.tsx","src/src/utils/debounce.tsx","src/src/steps/AssetSelection/index.tsx","src/src/components/MethodIcon/index.tsx","src/src/components/methods/WalletConnect/index.tsx","src/src/components/methods/WindowEthereum/index.tsx","src/src/hooks/useDepositAddress.tsx","src/src/hooks/useWeb3.tsx","src/src/steps/EnterAmount/index.tsx","src/src/steps/NetworkSelection/index.tsx","src/src/steps/PaymentMethod/index.tsx","src/src/steps/QRCode/index.tsx","src/src/steps/WalletConnect/index.tsx","src/src/steps/index.tsx","src/src/App.withAsset.tsx","src/src/App.withAssetAndNetwork.tsx","src/src/hooks/useWindowSize.tsx","src/src/App.tsx","src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { offsetLimitPagination } from '@apollo/client/utilities';\nimport { createRoot, Root } from 'react-dom/client';\n\nimport App from './App';\n\nexport interface Map3InitConfig {\n  anonKey: string;\n  fiat?: string;\n  generateDepositAddress: (\n    asset?: string,\n    network?: string,\n    memoEnabled?: boolean\n  ) => Promise<{ address: string; memo?: string }>;\n  slug?: string;\n  theme?: 'dark' | 'light';\n}\nexport class Map3 {\n  private onClose: () => void;\n  private root: Root;\n  private config: Map3InitConfig;\n\n  constructor(config: Map3InitConfig) {\n    if (!config.generateDepositAddress) {\n      throw new Error('generateDepositAddress is required');\n    }\n    if (!config.anonKey) {\n      throw new Error('anonKey is required');\n    }\n\n    if (!config.theme) {\n      config.theme = 'light';\n    }\n\n    if (!config.fiat) {\n      config.fiat = 'USD';\n    }\n\n    this.config = config;\n\n    this.onClose = () => {\n      this.root.unmount();\n      document.body.classList.remove('dark');\n    };\n\n    const element = document.createElement('div');\n    element.id = 'map3';\n    document.body.appendChild(element);\n\n    if (config.theme === 'dark') {\n      document.body.classList.add('dark');\n    }\n\n    this.root = createRoot(element);\n  }\n\n  public open() {\n    const client = new ApolloClient({\n      cache: new InMemoryCache({\n        typePolicies: {\n          Query: {\n            fields: {\n              assetsForOrganization: offsetLimitPagination(),\n            },\n          },\n        },\n      }),\n      headers: {\n        Authorization: 'Bearer ' + this.config.anonKey,\n      },\n      uri: process.env.CONSOLE_API_URL + '/graphql',\n    });\n    this.root.render(\n      <ApolloProvider client={client}>\n        <App config={this.config} onClose={this.onClose} />\n      </ApolloProvider>\n    );\n  }\n\n  public close() {\n    this.onClose();\n  }\n}\n\nexport const initMap3Sdk = (args: Map3InitConfig) => {\n  return new Map3(args);\n};\n\nif (typeof window !== 'undefined') {\n  // @ts-ignore\n  window.initMap3Sdk = initMap3Sdk;\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}